const pool = require('../settings/db')
const config = require('config')
const {validationResult, check} = require("express-validator");

class FindControllers {
    async findCollocuters(req, res) {
        const user_query = req.params.user_query

        try {
        // –≤ —Å–ª—É—á–∞–µ –Ω–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const errors = validationResult(user_query)
        if (!errors.isEmpty()) {
            return res.status(400).json({
                errors: errors.array(),
                massage: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥',
            })
        }

        pool.query(
            `SELECT ??, ?? FROM ?? WHERE ??.?? LIKE ?`,
            [config.get('fieldOneTableOne'),
                config.get('fieldFourTableOne'),
                config.get('tableOne'),
                config.get('tableOne'),
                config.get('fieldFourTableOne'), '%'+ user_query + '%']
        ).then((data) => {

            if (!data[0][0]) {
                return res.status(405).json({ massage: " –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ!!! "})
            } else {
                res.status(200).json( {data: data[0], massage: `–ù–∞–π–¥–µ–Ω–æ ${data[0].length}`})}
        })
    } catch (error) {
        return res.status(500).json({ massage: '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑...'})
    }
    };

    async findPageAllCollocuters(req, res) {
        const {page:pageNumber, limit: pageSize, userId} = req.query
        try {
            const numberOfResults = await pool.query('SELECT users.id, users.login FROM users WHERE 1', [
            ]).then((data) => {
                return data[0].length
            })

            const pageLimit = pageNumber * pageSize - pageSize // –≤—ã—á–∏—Å–ª—è–µ–º –Ω–æ–º–µ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è sql-–∑–∞–ø—Ä–æ—Å–∞

            const collocutersOfResults = await pool.query('SELECT ??.??, ??.?? FROM ?? WHERE ?? LIMIT ?,?', [
                config.get('tableOne'),
                config.get('fieldOneTableOne'),
                config.get('tableOne'),
                config.get('fieldFourTableOne'),
                config.get('tableOne'),
                config.get('fieldOneTableOne'),
                pageLimit, 
                +pageSize 
            ]).then((data) => {
                return data[0]
            })


          



            // let checkFriend = async (friendId) => {await pool.query('SELECT friends.friend_one, friends.friend_two FROM friends WHERE friend_one = ? AND friend_two = ?',[
            //     userId,
            //     friendId
            // ]).then((data) => {
            //     if (data[0][0]) { return true } else { return  false }
            // })}

            let newCollocutersOfResults =  []

            await Promise.all(collocutersOfResults.map(async (col) => {

                try {
                    let checkFriend = await pool.query('SELECT friends.friend_one, friends.friend_two FROM friends WHERE friend_one = ? AND friend_two = ?',[
                    userId,
                    col.id
                    ]).then((data) => {
                    if (data[0][0]) { return true } else { return  false }
                    })
                    newCollocutersOfResults.push({...col, friend:checkFriend})
                    return newCollocutersOfResults;
                } catch(err) {
                    throw err;
                }
            }));


            // SELECT 'friend_one','friend_two' FROM friends WHERE friend_one =28 AND friend_two=29; –Ω–∞—Ö–æ–¥–∏–º –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            let numberOfPages = Math.ceil(numberOfResults / pageSize) // –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü

            res.status(200).json({collocuters:newCollocutersOfResults, totalUsers: numberOfResults, totalPages: numberOfPages})

        } catch (error) {
            console.log('üì¢', error, '–ó–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è')
        }
    }

    async findAllFriends(req, res) {
        const { userId } = req.query

        try {
            const numberOfResults = await pool.query('SELECT users.id, users.login FROM users WHERE 1', [
            ]).then((data) => {
                return data[0].length
            })


            const collocutersOfResults = await pool.query('SELECT ??.??, ??.?? FROM ?? WHERE ??', [
                config.get('tableOne'),
                config.get('fieldOneTableOne'),
                config.get('tableOne'),
                config.get('fieldFourTableOne'),
                config.get('tableOne'),
                config.get('fieldOneTableOne'),
            ]).then((data) => {
                return data[0]
            })


            let newCollocutersOfResults =  []

            await Promise.all(collocutersOfResults.map(async (col) => {

                try {
                    let checkFriend = await pool.query('SELECT friends.friend_one, friends.friend_two FROM friends WHERE friend_one = ? AND friend_two = ?',[
                        userId,
                        col.id
                    ]).then((data) => {
                        if (data[0][0]) { return true } else { return  false }
                    })

                    newCollocutersOfResults.push({...col, friend:checkFriend})
                    return newCollocutersOfResults;
                } catch(err) {
                    throw err;
                }
            }));

            let friends = newCollocutersOfResults.filter( col => col.friend == true)

            res.status(200).json({friends})

        } catch (error) {
            res.status(404).json({massage: '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑...'})
        }
    }
}




module.exports = new FindControllers