const pool = require('../settings/db')
const config = require('config')
const {validationResult} = require("express-validator");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

const {
    REQ_USERS, REQ_ID, REQ_EMAIL, REQ_PASS,
    REQ_LOGIN, REQ_REGISTRATION, REQ_AVATAR
} = require ('dotenv').config().parsed


class authController {
    // /api/auth/login
    async login(req, res) {
        try {

            //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            const errors = validationResult(req)

            //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            if (!errors.isEmpty()) {
                return res.status(400).json({
                    errors: errors.array(),
                    massage: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É',
                })
            }

            // –ø–æ–ª—É—á–∞–µ–º –∏–∑ request –ø–æ–ª—è
            const {email, password} = req.body



            // –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –∑–∞–ª–æ–≥–∏–Ω–µ—Ç—å—Å—è —É–∂–µ –Ω–µ –º–æ–∂–µ–º

            const user = await pool.query(`SELECT * FROM ?? WHERE ?? = ?`, [
                REQ_USERS,
                REQ_EMAIL,
                email
            ]).then((data) => {
                try {
                    return data[0][0];
                } catch (error) {
                    return false
                }
            })


            if (!user) {
                return res.status(400).json({massage: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
            }


            //? –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –µ–≥–æ –ø–∞—Ä–æ–ª–∏
            const isMatch = await bcrypt.compare(password, user.password)
            if (!isMatch) {
                return res.status(400).json({massage: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'})
            }


            //—Å–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
            const token = jwt.sign(
                {
                    userId: user.id,
                },
                config.get('jwtSecret'),
                {
                    expiresIn: '1h',
                }, // —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç —Ç–æ–∫–µ–Ω —Å–≤–æ–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            )


            res.status(200).json({
                token,
                userId: user.id,
                userLogin: user.login,
                avatar: user.avatar,
                massage: '–£—Å–ø–µ—à–Ω–æ'
            })
        } catch (error) {
            res.status(500).json({massage: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'})
        }


    }

    //api/auth/register
    async register(req, res) {
        try {

            //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            const errors = validationResult(req)

            //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            if (!errors.isEmpty()) {
                console.log('üìå:', errors.errors[0].msg, 'üå¥ üèÅ')

                return res.status(400).json({
                    errors: errors.array(),
                    massage: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
                })
            }
            const {email, password} = req.body


// –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —é–∑–µ—Ä–∞
            const candidate = await pool.query(`SELECT * FROM ?? WHERE ?? = ?`, [
                REQ_USERS,
                REQ_EMAIL,
                email
            ]).then((data) => {
                try {
                    return data[0][0].email;
                } catch (error) {
                    return false
                }
            })

            if (candidate) {
                return res.status(405).json({message: " –¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
            }


// –≤ –ª–æ–≥–∏–Ω –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ, —á—Ç–æ –≤ email –¥–æ —Å–∏–º–≤–æ–ª–∞ @, –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            let login = (email.split('@')[0])

// —Ö–µ—à–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
            const hashedPassword = await bcrypt.hash(password, 12)
// –∫–æ–≥–¥–∞ –ø–∞—Ä–æ–ª—å –≥–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            await pool.query(`INSERT INTO ?? (??, ??, ??, ??, ??, ??) VALUES (NULL, ?, ?, ?, current_timestamp(),'')`, [
                REQ_USERS, REQ_ID, REQ_EMAIL, REQ_PASS, REQ_LOGIN, REQ_REGISTRATION, REQ_AVATAR,
                email, hashedPassword, login
            ]).then((data) => {
                // –æ—Ç–≤–µ—á–∞–µ–º —Ñ—Ä–æ–Ω—Ç—ç–Ω–¥—É
                res.status(201).json({massage: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –í–æ–π—Ç–∏'})
            })
        } catch (error) {
            res.status(500).json({massage: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'})
        }
    }
}


module.exports = new authController